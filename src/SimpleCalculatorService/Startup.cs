/*
 * Calculator API
 *
 * API that performs arithmetic operations on two numeric values.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Authentication;
using Microsoft.OpenApi.Models;
using System.Text.Json.Serialization;
using System.Text.Json;
using SimpleCalculatorService.Security;
using SimpleCalculatorService.Services;

namespace SimpleCalculatorService
{
    /// <summary>
    /// Startup
    /// </summary>
    public class Startup
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="env"></param>
        /// <param name="configuration"></param>
        public Startup(IWebHostEnvironment env, IConfiguration configuration)
        {
            //var vars = Environment.GetEnvironmentVariables();
            //foreach (DictionaryEntry entry in vars)
            //{
            //    Console.WriteLine($"{entry.Key} = {entry.Value}");
            //}
            //var key = Environment.GetEnvironmentVariable(Consts.JwtKey);
            //configuration[Consts.JwtKey] = key;
        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        /// <param name="services"></param>
        public void ConfigureServices(IServiceCollection services)
        {
            // Add framework services.
            services
            .AddMvc(options =>
            {
                //options.InputFormatters.RemoveType<SystemTextJsonInputFormatter>();
                //options.OutputFormatters.RemoveType<SystemTextJsonOutputFormatter>();
            })
            .AddJsonOptions(options =>
            {
                options.JsonSerializerOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase;
                options.JsonSerializerOptions.DictionaryKeyPolicy = JsonNamingPolicy.CamelCase;


                // Include fields (not just properties)
                options.JsonSerializerOptions.IncludeFields = true;

                // Pretty-print the output (useful for dev)
                options.JsonSerializerOptions.WriteIndented = true;

                // Ignore null values (optional)
                options.JsonSerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull;

                // Example: custom converter (optional)
                options.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter());
            });
            //.AddXmlSerializerFormatters();
            

            services.AddAuthentication(BearerAuthenticationHandler.SchemeName)
                .AddScheme<AuthenticationSchemeOptions, BearerAuthenticationHandler>(BearerAuthenticationHandler.SchemeName, null);

            services.AddSingleton<ICalculatorService, CalculatorService>();
            services.AddSingleton<IJwtService, JwtService>();

            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("1.0.0", new OpenApiInfo
                {
                    Title = "Calculator API",
                    Version = "1.0.0",
                    Description = "Calculator API (ASP.NET Core 8.0)",
                    Contact = new OpenApiContact()
                    {
                        Name = "Swagger Codegen Contributors",
                        Url = new Uri("https://github.com/swagger-api/swagger-codegen"),
                        Email = ""
                    },
                    License = new OpenApiLicense
                    {

                    },

                });

                //c.SwaggerDoc("v1", new OpenApiInfo { Title = "Calculator API", Version = "v1" });

                // Add the JWT security definition
                c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    Name = "Authorization",
                    Type = SecuritySchemeType.Http,
                    Scheme = "Bearer",
                    BearerFormat = "JWT",
                    In = ParameterLocation.Header,
                    Description = "Enter 'Bearer' [space] and then your valid JWT token.\n\nExample: Bearer eyJhbGciOiJIUzI1NiIsIn..."
                });

                // Apply the security requirement globally
                c.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "Bearer"
                            }
                        },
                        new string[] { }
                    }
                });
            });
        }

        /*
        services
            .AddSwaggerGen(c =>
            {
                c.SwaggerDoc("1.0.0", new OpenApiInfo
                {
                    Version = "1.0.0",
                    Title = "Calculator API",
                    Description = "Calculator API (ASP.NET Core 8.0)",
                    Contact = new OpenApiContact()
                    {
                       Name = "Swagger Codegen Contributors",
                       Url = new Uri("https://github.com/swagger-api/swagger-codegen"),
                       Email = ""
                    },
                    //TermsOfService = new Uri("")
                });
                c.CustomSchemaIds(type => type.FullName);
                c.IncludeXmlComments($"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{_hostingEnv.ApplicationName}.xml");

                // Include DataAnnotation attributes on Controller Action parameters as Swagger validation rules (e.g required, pattern, ..)
                // Use [ValidateModelState] on Actions to actually validate it in C# as well!
                c.OperationFilter<GeneratePathParamsValidationFilter>();
            });

        */

        /// <summary>
        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        /// </summary>
        /// <param name="app"></param>
        /// <param name="env"></param>
        /// <param name="loggerFactory"></param>
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILoggerFactory loggerFactory)
        {
            app.UseRouting();

            //TODO: Uncomment this if you need wwwroot folder
            // app.UseStaticFiles();

            app.UseAuthorization();

            app.UseSwagger();
            app.UseSwaggerUI(c =>
            {
                //TODO: Either use the SwaggerGen generated Swagger contract (generated from C# classes)
                c.SwaggerEndpoint("/swagger/1.0.0/swagger.json", "Calculator API");

                //TODO: Or alternatively use the original Swagger contract that's included in the static files
                //c.SwaggerEndpoint("/swagger-original.json", "Calculator API Original");
            });


            //TODO: Use Https Redirection
            // app.UseHttpsRedirection();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                //TODO: Enable production exception handling (https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling)
                app.UseExceptionHandler("/Error");

                app.UseHsts();
            }
        }
    }
}
